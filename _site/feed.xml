<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-07T23:55:46+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">x.merge(y.merge(x))</title><subtitle>Thoughts on cognitive science from a guy that studied philosophy, psychology, neuroscience, linguistics, &amp; computer science</subtitle><author><name>Daniel J. Cook</name></author><entry><title type="html">Timing attacks</title><link href="http://localhost:4000/blog/2019/04/03/timing-attacks.html" rel="alternate" type="text/html" title="Timing attacks" /><published>2019-04-03T00:00:00+02:00</published><updated>2019-04-03T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/04/03/timing-attacks</id><content type="html" xml:base="http://localhost:4000/blog/2019/04/03/timing-attacks.html">&lt;p&gt;A nice blog post on &lt;a href=&quot;https://codahale.com/a-lesson-in-timing-attacks/&quot;&gt;Timing attacks&lt;/a&gt; that says,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Every time you compare two values, ask yourself: what could someone do if they knew either of these values?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the answer is, they could exploit my program, then you might want to make sure your code executes at a constant time. For example, if you’re checking whether two strings are equal to one another, you might be tempted to do something like this,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def checkEquality(pass1, pass2, pass_size = 64):
  for i in range(pass_size):
    if pass1[i] != pass2[i]:
      return False # passwords do not match
  return True # passwords match
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The problem with the code above is explained in the blog. If you can’t think of a reason not to use that code, then I encourage you to read it in full. But, if you get already that the code finishes in varying amounts of time for non-matches, and that this fact can be used to guess the match, then you can go on to look at the the alternative method,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def is_equal(a, b):
    if len(a) != len(b):
        return False

    result = 0
    for x, y in zip(a, b):
        result |= x ^ y
    return result == 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">A nice blog post on Timing attacks that says, Every time you compare two values, ask yourself: what could someone do if they knew either of these values?</summary></entry><entry><title type="html">Logical operators in Python</title><link href="http://localhost:4000/blog/2019/04/03/logical-operators-in-Python.html" rel="alternate" type="text/html" title="Logical operators in Python" /><published>2019-04-03T00:00:00+02:00</published><updated>2019-04-03T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/04/03/logical-operators-in-Python</id><content type="html" xml:base="http://localhost:4000/blog/2019/04/03/logical-operators-in-Python.html">&lt;p&gt;This post is a work in progress. It serves mainly as a reference to be updated occasionally on Python. I may in the future update this to include the equivalents in Java.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR (Inclusive) := |&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;True | True == True
False | True == True
True | False == True
False | False == False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OR (Exclusive) := ^&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;True ^ True == False
False ^ True == True
True ^ False == True
False ^ False == False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">This post is a work in progress. It serves mainly as a reference to be updated occasionally on Python. I may in the future update this to include the equivalents in Java.</summary></entry><entry><title type="html">OpenMPI, parallel HDF5, mpi4py, and h5py, take 2</title><link href="http://localhost:4000/blog/2019/02/21/parallel-hdf5-2.html" rel="alternate" type="text/html" title="OpenMPI, parallel HDF5, mpi4py, and h5py, take 2" /><published>2019-02-21T00:00:00+01:00</published><updated>2019-02-21T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/02/21/parallel-hdf5-2</id><content type="html" xml:base="http://localhost:4000/blog/2019/02/21/parallel-hdf5-2.html">&lt;p&gt;This is the second time in less than a year I’ve face the problem of configuring parallel hdf5 on a server. I don’t even know why I bother! Oh, yeah, that’s right, I thought hdf5 was cool when I was first introduced to it, and I wanted to make it even more complicated by introducing concurrent i/o. Anyway, what follows is my catalogue of errors when trying to install on an ubuntu server. If you’ve got any suggestions on what I’m doing wrong, please comment :().&lt;/p&gt;

&lt;h3 id=&quot;what-do&quot;&gt;What do?&lt;/h3&gt;

&lt;p&gt;Attempting to .configure, make, make install, OpenMpi &amp;amp; parallel-HDf5 (using the CC=mpicc option)
Attempting to .configure, make, make install zlib
Attempting to pip install mpi4py &amp;amp; h5py (with links to the pHDf5 library using specific options for pip)&lt;/p&gt;

&lt;p&gt;See below for details on steps already taken and specific bugs:&lt;/p&gt;

&lt;h3 id=&quot;openmpi&quot;&gt;OPENMPI&lt;/h3&gt;
&lt;p&gt;Status: No bugs&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; curl -O https://download.open-mpi.org/release/open-mpi/v2.0/openmpi-2.0.4.tar.gz
&amp;gt; tar xf openmpi-2.0.4.tar.gz
&amp;gt; cd openmpi-2.0.4
&amp;gt; ./configure --prefix=$HOME/.local
&amp;gt; make all
&amp;gt; make install
&amp;gt; mpirun --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This compiles perfectly. All the executables are located in my .local path.&lt;/p&gt;

&lt;p&gt;The last commands prints,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mpirun (Open MPI) 2.0.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;zlib-shared-object&quot;&gt;ZLIB (shared object)&lt;/h3&gt;
&lt;p&gt;Status: Bugs&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; curl -O ...
&amp;gt; tar xf ...
&amp;gt; cd zlib-x.x.x
&amp;gt; ./configure --prefix=$HOME/.local
&amp;gt; make test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everything works. The C header file is in the .local/include dir and the shared object is in the .local/lib directory.&lt;/p&gt;

&lt;h3 id=&quot;zlib-python&quot;&gt;ZLIB (Python)&lt;/h3&gt;
&lt;p&gt;Status: bugs&lt;/p&gt;

&lt;p&gt;However, installation of the zlib Python module with pip fails:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; pip install zlib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This prints,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Collecting zlib
&amp;gt;    Could not find a version that satisfies the requirement zlib (from versions: )
&amp;gt;    No matching distribution found for zlib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I tried to fix this by explicitly telling the C compiler where to find the zlib stuff.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; zlib_lib=&quot;$HOME/.local/lib&quot;
&amp;gt; zlib_inc=&quot;$HOME/.local/include&quot;
&amp;gt; export CPPFLAGS=&quot;-I${zlib_inc} ${CPPFLAGS}&quot;
&amp;gt; export LD_LIBRARY_PATH=&quot;${zlib_lib}:${LD_LIBRARY_PATH}&quot;
&amp;gt; export LDFLAGS=&quot;-L${zlib_lib} -Wl,-rpath=${zlib_lib} ${LDFLAGS}&quot;
&amp;gt; pip install zlib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But, this also fails and produces the same message as above from pip.&lt;/p&gt;

&lt;p&gt;So, it seems I have zlib properly installed, but I do not have a working Python module called, zlib.&lt;/p&gt;

&lt;p&gt;Oh, I’m running the default ubuntu Python 3.6 (not anaconda or anything.)&lt;/p&gt;

&lt;h3 id=&quot;phdf5-c&quot;&gt;pHDf5 (C)&lt;/h3&gt;
&lt;p&gt;Status: bugs&lt;/p&gt;

&lt;p&gt;Downloaded from https://www.hdfgroup.org/downloads/hdf5/source-code/&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd hdf5-1.10.4
&amp;gt; CC=$HOME/.local/bin/mpicc ./configure --prefix=$HOME/.local --enable-shared --enable-parallel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This seems to give me the output I want. But doing&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; make
&amp;gt; make check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;fails to return a positive result. Namely, the MPI_ABORT seems to be called during the parallel tests.&lt;/p&gt;

&lt;p&gt;Also, I have tried to install the regular hdf5 library (with no parallel support) by doing,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; CC=$HOME/.local/bin/mpicc ./configure --prefix=$HOME/.local --enable-shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But, this also fails on the &amp;gt; make check stage.&lt;/p&gt;

&lt;p&gt;Note that I have gotten this setup running before with my macbook pro 8.1 back in May 2018:
https://www.danjcook.com/blog/2018/05/16/parallel-HDF5-for-use-in-Python.html&lt;/p&gt;

&lt;p&gt;The above link might be helpful in future attempts to get this constellations of software up and running on the master-node.&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">This is the second time in less than a year I’ve face the problem of configuring parallel hdf5 on a server. I don’t even know why I bother! Oh, yeah, that’s right, I thought hdf5 was cool when I was first introduced to it, and I wanted to make it even more complicated by introducing concurrent i/o. Anyway, what follows is my catalogue of errors when trying to install on an ubuntu server. If you’ve got any suggestions on what I’m doing wrong, please comment :().</summary></entry><entry><title type="html">Processes vs Threads</title><link href="http://localhost:4000/python/2019/02/08/multithreading-and-multiprocessing-in-python.html" rel="alternate" type="text/html" title="Processes vs Threads" /><published>2019-02-08T00:00:00+01:00</published><updated>2019-02-08T00:00:00+01:00</updated><id>http://localhost:4000/python/2019/02/08/multithreading-and-multiprocessing-in-python</id><content type="html" xml:base="http://localhost:4000/python/2019/02/08/multithreading-and-multiprocessing-in-python.html">&lt;p&gt;&lt;strong&gt;What is a process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A process is basically a container that holds all of the stuff that a program needs to run, including, references to the system resources available to the process.&lt;/p&gt;

&lt;p&gt;Each process has an address space, a list of memory locations from 0 to some maximum that the process can read from and write to. The address space is important because it contains the executable program, the program data, and a stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a thread?&lt;/strong&gt;
WIP&lt;/p&gt;</content><author><name>dc</name></author><category term="python" /><summary type="html">What is a process?</summary></entry><entry><title type="html">Intrepretation of equations</title><link href="http://localhost:4000/blog/2019/01/30/how-I-read-equations.html" rel="alternate" type="text/html" title="Intrepretation of equations" /><published>2019-01-30T00:00:00+01:00</published><updated>2019-01-30T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/01/30/how-I-read-equations</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/30/how-I-read-equations.html">&lt;p&gt;Math often feels difficult to me because I try to put all of my understandings into plain English sentences, and mathematical understanding is sometimes &lt;emphasis&gt;un&lt;emphasis&gt;intuitive.&lt;/emphasis&gt;&lt;/emphasis&gt;&lt;/p&gt;

&lt;p&gt;For example, consider the function $f$.&lt;/p&gt;

&lt;p&gt;Define $f$ as&lt;/p&gt;

&lt;p&gt;{$ A,B,C,…,Z $} $\to$ {$ 0,1,2,…,25 $}&lt;/p&gt;

&lt;p&gt;(The set A consisting of all elements of the English alphabet maps to the set B consisting of the integers 0 through 25, inclusive.)&lt;/p&gt;

&lt;p&gt;by&lt;/p&gt;

&lt;p&gt;$A\mapsto 0 $, $B\mapsto 1 $, $C\mapsto 2 $, …, $Z\mapsto 25 $&lt;/p&gt;

&lt;p&gt;After only a few moments, this definition is easy to grasp. But, it’s not so easy to translate what we know about $f$ into English sentences. Go ahead, I challenge you!&lt;/p&gt;

&lt;p&gt;Did you try it? Let me know if you did. Here’s my own account:&lt;/p&gt;

&lt;h3 id=&quot;map-from-the-english-alphabet-to-the-set-s025&quot;&gt;Map from the English alphabet to the set S={0,…,25}&lt;/h3&gt;

&lt;p&gt;$\forall x$ $\in S$, sort the elements of the set S and locate and return of element x by it’s relative fixed position in the newly ordered set $S’$&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">Math often feels difficult to me because I try to put all of my understandings into plain English sentences, and mathematical understanding is sometimes unintuitive.</summary></entry><entry><title type="html">networks in python 041</title><link href="http://localhost:4000/blog/2019/01/22/networks-in-python-lesson-041.html" rel="alternate" type="text/html" title="networks in python 041" /><published>2019-01-22T00:00:00+01:00</published><updated>2019-01-22T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/01/22/networks-in-python-lesson-041</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/22/networks-in-python-lesson-041.html">&lt;p&gt;The urllib is really powerful. It can wrap your input data in headers and send them off to a server as properly formatted html request objects at a remote host. Saying this entails that we distinguish between the concept of a host and a server. Whereas a host is the suite of protocols that define the goals of a target operating system, a server is a program that runs on a host. Many people do not make this distinction. They do not realize that their pcs and smartphones can be configured to run as server apps. This should not be surprising, given the news about hacking and all, but it may seem surprising to some. For those of you who are concerned that your computer is participating in computations not under your control, I have to say, I sympathize with you, but &lt;em&gt;I DO plan to inspect all of the code that runs on my pc all of the time!&lt;/em&gt; It’s just that sometimes … deadlines.&lt;/p&gt;

&lt;p&gt;Ok, now check out some cool program code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
# Python 3.7
# download_data.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;REMOTE_SERVER_HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://www.cnn.com'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'HTTP Client Example'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REMOTE_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;given_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This program basically does something like,&lt;/p&gt;

&lt;p&gt;Step 1. Fetch some utf-8 symbols from the host, http://www.cnn.com.
  Step 2. Decode the utf-8 symbols and print them in ascii characters on the standard output&lt;/p&gt;

&lt;p&gt;Try running it for yourself.&lt;/p&gt;

&lt;p&gt;It will give you some interesting stuff to read in the terminal. You can also try it with some parameters.&lt;/p&gt;

&lt;p&gt;It works like this,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python download_data.py --host=http://www.danjcook.com/blog/2019-01-22-networks-in-python-lesson-041
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The program constructs an HTTPClient class. An instance of the class assigns to itself a name corresponding to an ip address of a remote host, REMOTE_SERVER_HOST. The client then has a single method that does all of the things we mentioned at the outset of the lesson. It constructs http headers, and sends them off to a server as properly formatted requests for html at the remote host. On the receiving end, it receives replies from the server of the data. Note that state changes triggered in the server app running on the host may have resulted in a complex interplay of several different peices of technology, but we do not know this. It is transparent to us.&lt;/p&gt;

&lt;p&gt;Thus, we will have to follow up in the future by showing how to request from the remote host their credentials. We can then use this information to make decisions about the soundness of the response.&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">The urllib is really powerful. It can wrap your input data in headers and send them off to a server as properly formatted html request objects at a remote host. Saying this entails that we distinguish between the concept of a host and a server. Whereas a host is the suite of protocols that define the goals of a target operating system, a server is a program that runs on a host. Many people do not make this distinction. They do not realize that their pcs and smartphones can be configured to run as server apps. This should not be surprising, given the news about hacking and all, but it may seem surprising to some. For those of you who are concerned that your computer is participating in computations not under your control, I have to say, I sympathize with you, but I DO plan to inspect all of the code that runs on my pc all of the time! It’s just that sometimes … deadlines.</summary></entry><entry><title type="html">A conceptual sketch of a P2P network game</title><link href="http://localhost:4000/blog/2019/01/22/peer-to-peer-network-games.html" rel="alternate" type="text/html" title="A conceptual sketch of a P2P network game" /><published>2019-01-22T00:00:00+01:00</published><updated>2019-01-22T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/01/22/peer-to-peer-network-games</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/22/peer-to-peer-network-games.html">&lt;p&gt;Let us think about a special two player game in which if one player successfully cheats, then the other player losses the value gained by the former. On the other hand, if the cheater is detected, then the cheater losses a staked value to the non-cheater. Finally, in this game, both players will gain some value from cooperating and not cheating.&lt;/p&gt;

&lt;p&gt;Table 1. shows the combination of player inputs and the outcomes of the game when the staked values are standardized to 1.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Player A Cheats&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player B Cheats&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player A is successful&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player B is successful&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player A Outcome/Gain&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player B Outcome/Gain&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player A Outcome/Loss&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-2&lt;/td&gt;
      &lt;td&gt;-2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Player B Outcome/Loss&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The way to read Table 1. is to start in the left most column. Reading down row-wise, we get the sequence, [1,0,1,0,1,0,0,-1]. We interpret this as follows: if Player A cheats, is successful, and Player B does not cheat and is (obviously) not successful at cheating, then, as per the rules of the game, Player A gains a value of +1, but Player B loses the value of 1. A similar logic can be applied to the other columns in the table.&lt;/p&gt;

&lt;p&gt;What can be seen from Table 1. is that the biggest gains for both players come when they do not cheat, but their partners are exposed as cheating. After that, the gains for both players are the same whether they cheat or not. Thus, the best option for both Players is to not cheat, since their biggest win comes from not cheating, their biggest loss from failed attempts to cheat, and additionally, the benefit they stand to gain from cheating and not being discovered is as large as the benefit from not cheating when their partner also does not cheat. It seems then, that this sort of game encourages cooperation among the players.&lt;/p&gt;

&lt;p&gt;Now, take the same game logic and apply it to the hosts in a peer-to-peer network.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The hosts in the network will implement a permissionless many-read-once-write database consisting of timestamped records of the existence of a digital asset.
What we would like to offer all participants in the network is the guarantee that the timestamp of a transaction is equal to the first timestamp on the transaction when its read from a local instantiation of the shared database, and plus, the information can be advertised by the autonomous agent that originally broadcasted the transaction. We can do this by building the above game logic into our software design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;A proposal for a new p2p game&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose that when a node wishes to broadcast a transaction, they must receive a timestamp on the transaction from one of their neighbor nodes.
To get a timestamp from a neighbor, a sender signs a data file that contains at least, a unique transaction address, a transaction timestamp, a broadcast interval, two empty variables to be explained later, the sender id (certified host:port), and the recipient id (certified host:port). Neighbors are incentivized to accept these timestamp requests because all nodes are continually adding transactions to their local databases. We assume that some of these transactions issued by nodes are intended for a shared public database, which acts as the network’s global ledger, and that the only way into this ledger is through a network consensus approved timestamp.&lt;/p&gt;

&lt;p&gt;Now, an important rule for the game is that when a node sends another node a timestamp request, the recipient should do two things. First, the recipient should incorporate the transaction into his local DAG in the aforementioned way. Second, the recipient should return to the sender a proof of the transaction’s incorporation into the recipient’s local DAG. Thus, sending a transaction from one node to another node in this game constitutes a request for contract. We explain these steps below.&lt;/p&gt;

&lt;p&gt;First, when a neighbor node adds the transaction of their peer to their own database, they will always hash the new transaction with two transactions in their database that are not yet hashed by any other transactions. In other words, each new transaction is linked to k older transactions (where k can be chosen by the network consensus). Occasionally, these transactions will be value transferring transactions, but mostly (at least, at the start of the network), the transactions will not hold any value. Thus, when the receiver accepts a sender’s transaction timestamp request, the receiver will follow these steps for incorporating the new transaction into her local database.&lt;/p&gt;

&lt;p&gt;Second, what the receiver should return to the sender is a shared secret. The shared secret will contains the sender’s signed copy of the original transaction request, and, additionally, the transactions location in the recipient’s database and its path.&lt;/p&gt;

&lt;p&gt;An important part of the shared secret is the transactions location in the recipient’s database and its path information. Recall that the transactions path is generated by the concatenation of the sender’s transaction at time t with information from the receiver’s database state at time t + 1. Each nodes database state for all times &amp;gt; 0 will be an instance of a Directed Acyclic Graph. Their local DAGs will consist of many transactions approving other transactions. Thus, what the recipient returns to the sender is the path information of the sender’s new transaction in the recipients database.&lt;/p&gt;

&lt;p&gt;The returned shared secret will also be associated with an interval of time called, the broadcast interval. During this interval, the sender is permitted to request from the receiver that the receiver broadcasts the secret to which the sender can testify knowledge. After the interval has expired, the receiver can likewise broadcast the revealed secret.&lt;/p&gt;

&lt;p&gt;After the sender and receiver know of the transaction and the secret, both are now free to broadcast the transaction to other nodes. During this broadcast interval, an option is selected that tells the new receivers that the transaction is already in contract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are the rules of the broadcast interval.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the sender’s reveal request comes within the agreed upon broadcast interval, but the receiver does not broadcast the secret, then the sender can reveal the contents of the secret. In this case, the sender’s revelation of the secret should show that the receiver has cheated, and the receiver should be penalized by 2, and the sender rewarded by 2.&lt;/p&gt;

&lt;p&gt;On the other hand, if the sender does not request from the receiver the reveal of the secret within the agreed upon interval of time, then the receiver can broadcast the revelation of the secret, and the sender should be penalized by 2, and the receiver rewarded by 2.&lt;/p&gt;

&lt;p&gt;From this it is clear that both sender and receiver should execute their respective broadcast interval functions in due time. In a case of unintentional cheating, e.g. crash failures, the network can accept crash reports from the failed autonomous agent, and make tribunal decisions about liabilities for damages.&lt;/p&gt;

&lt;p&gt;Recall now that the goal of this game is to provide consistent timestamps for many reads on the same transaction accessed from any local ledger, and that these timestamps are equal to the first recorded time by the sender.&lt;/p&gt;

&lt;p&gt;To make this system work in providing for our goal, we should use a third type of node in the game that aggregates all value bearing transactions and their metadata, and puts this information into a storage container also organized as an instance of a Directed Acyclic Graph.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions to discuss&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What prevents the nodes from cheating? What are the rewards for not cheating? How are punishments implemented? How can nodes cheat? What’s the purpose of having the nodes continually add transactions?&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html">Let us think about a special two player game in which if one player successfully cheats, then the other player losses the value gained by the former. On the other hand, if the cheater is detected, then the cheater losses a staked value to the non-cheater. Finally, in this game, both players will gain some value from cooperating and not cheating.</summary></entry><entry><title type="html">Scientist vs engineer vs developer</title><link href="http://localhost:4000/blog/2018/09/13/scientists-engineers-developers.html" rel="alternate" type="text/html" title="Scientist vs engineer vs developer" /><published>2018-09-13T00:00:00+02:00</published><updated>2018-09-13T00:00:00+02:00</updated><id>http://localhost:4000/blog/2018/09/13/scientists-engineers-developers</id><content type="html" xml:base="http://localhost:4000/blog/2018/09/13/scientists-engineers-developers.html">&lt;p&gt;&lt;a href=&quot;http://alisongopnik.com/Papers_Alison/sciam-Gopnik.pdf&quot;&gt;We’re all scientists to some extent, right?&lt;/a&gt; That’s the question I’ve been asking myself lately as I try to navigate the distinction between being a scientist, an engineer, and a software developer. Have you ever wondered if these distinctions are arbitrary, or if they reflect some deeper reality? Here’s my take:&lt;/p&gt;

&lt;p&gt;A scientist is just a person that approaches problems in a &lt;strong&gt;scientific way&lt;/strong&gt;. According to me, the scientific way to approach problems is to begin with careful deductive and inductive reasoning, and follow up conclusions with experiments The goal of experimenting is to provide evidence against a &lt;strong&gt;general&lt;/strong&gt; conclusion, and to provide &lt;strong&gt;specific&lt;/strong&gt; details about the context under which a valid conclusion is sound. Some scientists go the extra step and create public reports on their conclusions. Their reports might be verbal or written, it doesn’t matter. What really matters is that the scientist records the details of their reasoning processes and the experimental procedures that were used to infer to their conclusions.&lt;/p&gt;

&lt;p&gt;Engineers are a lot like scientists in that they approach problems scientifically. However, unlike a scientist, engineers work with (usually) a specific subset of all of the possible conclusions that are known to have a basis in reality, and they do so under certain experimental conditions. In so doing, engineers end up designing structures that maintain the truth of a conclusion in adverse or even independent experimental conditions. Thus, an engineer is a like scientist that’s learned experimental procedures, learned what parameters control a specific object, and usually, have some experience in designing and building new structures and contexts for objects to work in. &lt;/p&gt;

&lt;p&gt;Finally, a developer. A developer is someone that implements solutions to well-defined problems.  Developer have experience implementing structures designed by engineers that are useful or desired by other people, including the developer. Developers may be scientific, but - in my opinion - they ought not be made responsible to the same demands as scientists or engineers. Most importantly, developers should know how to implement, and they should be able to do it quickly. That’s, I think the main distinction: time. When I’ve got some more of that, I’ll follow up by telling you how I think time &amp;amp; money factor into the distinctions I’ve made.&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><category term="data science, engineering, development, devops, machine learning, deep learning, software, engineer, scientists, science" /><summary type="html">We’re all scientists to some extent, right? That’s the question I’ve been asking myself lately as I try to navigate the distinction between being a scientist, an engineer, and a software developer. Have you ever wondered if these distinctions are arbitrary, or if they reflect some deeper reality? Here’s my take:</summary></entry><entry><title type="html">How to decentralize identity management - an outline</title><link href="http://localhost:4000/blog/2018/06/01/decentralized-identity-management.html" rel="alternate" type="text/html" title="How to decentralize identity management - an outline" /><published>2018-06-01T00:00:00+02:00</published><updated>2018-06-01T00:00:00+02:00</updated><id>http://localhost:4000/blog/2018/06/01/decentralized-identity-management</id><content type="html" xml:base="http://localhost:4000/blog/2018/06/01/decentralized-identity-management.html">&lt;p&gt;&lt;img src=&quot;https://www.danjcook.com/assets/images/Untitled Diagram.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s go through what’s going on in Figure 1 starting with the first user node on the left. See the &lt;a href=&quot;#key-terms&quot;&gt;key terms below if you get lost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A user makes a personally identifying transaction (pid-tx), which represents the node’s consent to a release of pid to a provider with the assistance of an intermediary called a certifier.&lt;/p&gt;

&lt;p&gt;The protocol pushes a notice to the provider requesting access to the user’s pid, and a set of possible certifiers of the pid.&lt;/p&gt;

&lt;p&gt;Provider’s are entities wishing to obtain access to the pid_tx content. Certifiers are entities in possession of the ability to testify that the pid_tx was in fact issued by, owned by, or generated by the user.&lt;/p&gt;

&lt;p&gt;The providers that received the user pid_tx notification should issue an acknowledgement transaction, which acknowledges the presence of their user’s alleged pid in the pid-tx. In the event that there is only one user, the provider will reference only one transaction. In the event that there are many, the provider will reference at most K pid_txs. The provider’s transaction is a representation of their commitment to compensate at a certain amount any possible certifiers for the validation of a user’s pid_tx.&lt;/p&gt;

&lt;p&gt;In the presence of an acknowledgement transaction, the protocol should prompt certifiers that received the pid_tx notification to issue their own acknowledgement transaction acknowledging the presence of a user’s pid_tx for which they can offer validation, and the provider’s commitment to fulfil an obligation to the certifier upon receipt of valid pid.&lt;/p&gt;

&lt;p&gt;The protocol should subscribe the user to providers and certifiers that approve the user’s original pid_tx. Upon notification of an outstanding negotiation on the pid_tx, the protocol should prompt the user to issue a new consent transaction that approves the certifier’s and the provider’s acknowledgement transactions. The user’s consent transaction represents the user’s consent to the transfer between a provider and a certifier of information pertaining to the user’s identity.&lt;/p&gt;

&lt;p&gt;If the user approves of the provider’s and certifier’s acknowledgement transactions, then the protocol should prompt the provider to initiate finalization with a negotiation transaction that approves the certifier’s acknowledgement transaction and the user’s consent transaction. Next, the protocol should prompt to make a certification transaction, which approves of the user’s consent transaction and the provider’s negotiation transaction.&lt;/p&gt;

&lt;p&gt;If the certifier makes a certification transaction, then the protocol should prompt the provider to make a closing transaction, which approves the user’s consent transaction and the certifier’s certification transaction.&lt;/p&gt;

&lt;h1 id=&quot;key-terms&quot;&gt;key-terms&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt; - a node in the network that wishes to reveal personally identifying data (pid)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Provider&lt;/strong&gt; - a node in the network that wishes to obtain a user’s pid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Certifier&lt;/strong&gt; - a node in the network that both the user and the provider trust to provide reliable metadata on the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personally identifying transaction (pid-tx)&lt;/strong&gt; - a transaction representing the identity of the node&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgement transaction&lt;/strong&gt; - a transaction representing the acknowledgement by an entity of a pid-tx by either an approver or a certifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Outstanding negotiation&lt;/strong&gt; - the state of affairs in which an approver and a certifier have both issued acknowledgement transactions, and the user is notified and prompted to provide a consent transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consent transaction&lt;/strong&gt; - a transaction representing the user’s consent to an outstanding negotiation on the user’s pid_tx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Negotiation transaction&lt;/strong&gt; - a transaction made by a provider representing the provider’s acceptance of the certifier as an authority for the provider’s target pid_tx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Certification transaction&lt;/strong&gt; - a transaction made by a certifier representing the certifiers acceptance of the terms of the provider’s acknowledge transaction, negotiation transaction, and the user’s pid_tx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closing transaction&lt;/strong&gt; - a transaction made by a provider representing the provider’s acknowledge of receipt of the pid.&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><summary type="html"></summary></entry><entry><title type="html">OpenMPI, parallel HDF5, mpi4py, and h5py</title><link href="http://localhost:4000/blog/2018/05/16/parallel-HDF5.html" rel="alternate" type="text/html" title="OpenMPI, parallel HDF5, mpi4py, and h5py" /><published>2018-05-16T00:00:00+02:00</published><updated>2018-05-16T00:00:00+02:00</updated><id>http://localhost:4000/blog/2018/05/16/parallel-HDF5</id><content type="html" xml:base="http://localhost:4000/blog/2018/05/16/parallel-HDF5.html">&lt;p&gt;Here’s the steps I took to set up pHDF5, MPI and Python on my macOS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Openmpi&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O https://download.open-mpi.org/release/open-mpi/v2.0/openmpi-2.0.4.tar.gz
tar xf openmpi-2.0.4.tar.gz
cd openmpi-2.0.4/
./configure --prefix=usr/local/openmpi
make all
make install
usr/local/openmpi/mpirun/mpirun --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If successful, the last line prints,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mpirun (Open MPI) 2.0.4.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Get the link for the openmpi download from https://www.open-mpi.org/&lt;/li&gt;
  &lt;li&gt;This installs to the usr/local directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HDF5, the parallel version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download parallel HDF5 to &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local/&lt;/code&gt;, unzip, and cd&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CC=$HOME/mpicc ./configure --with-zlib=/usr/local/opt --disable-fortran --prefix=$HOME --enable-shared --enable-parallel
make
make check
sudo make install
h5pcc -showconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That ends up showing you some configuration variables for HDF5.&lt;/p&gt;

&lt;p&gt;If all goes well, you should see you got the parallel version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mpi4py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I installed mpi4py via,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env MPICC=usr/local/openmpi/mpicc pip install mpi4py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;h5py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I uninstalled my older version of h5py:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip uninstall h5py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I reinstalled via,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CC=&quot;mpicc&quot; HDF5_MPI=&quot;ON&quot; HDF5_DIR=/usr/local/bin/ pip install --no-binary=h5py h5py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from mpi4py import MPI
print &quot;Hello World (from process %d)&quot; % MPI.COMM_WORLD.Get_rank()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last line prints,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello World (from process 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import h5py
print h5py.version.info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last line prints a summary of the h5py configuration. Everything looked dandy.&lt;/p&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rank = MPI.COMM_WORLD.rank  # The process ID (integer 0-3 for 4-process run)
f = h5py.File('parallel_test.hdf5', 'w', driver='mpio', comm=MPI.COMM_WORLD)
dset = f.create_dataset('test', (4,), dtype='i')
dset[rank] = rank
f.close()
import os
print os.listdir(os.getcwd())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last line prints,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;parallel_test.hdf5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which implies you got a hdf5 file.&lt;/p&gt;</content><author><name>dc</name></author><category term="blog" /><category term="parallel, HDF5, MPI" /><summary type="html">Here’s the steps I took to set up pHDF5, MPI and Python on my macOS.</summary></entry></feed>